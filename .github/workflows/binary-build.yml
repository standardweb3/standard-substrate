name: Build Binaries

permissions:
  contents: read

env:
  TOOLCHAIN_BUILD: "nightly-2021-06-28"
  TOOLCHAIN_OVERRIDE: false

# Controls when the action will run.
on:
  push:
    branches:
      - master
    paths:
      - "node/**"
      - "pallets/**"
      - "primitives/**"
      - "runtime/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      toolchain-build:
        description: "Rust toolchain to use"
        default: ${TOOLCHAIN_BUILD}
        required: false
      toolchain-override:
        description: "Set installed toolchain as an override for the current directory"
        default: ${TOOLCHAIN_OVERRIDE}
        required: false

defaults:
  run:
    shell: bash
    working-directory: ./

# Cancel any in-flight jobs for the same PR/branch so there's only one active
# at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rust-build:
    strategy:
      matrix:
        # macos-11 not yet available, currently is in private preview
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout - ${{ matrix.os }}
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Rust Dependencies - ${{ matrix.os }}
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo apt update
          sudo apt install -y git clang curl libssl-dev llvm libudev-dev

      - name: Rust Dependencies - ${{ matrix.os }}
        if: ${{ matrix.os == 'macos-10.15' }}
        run: |
          brew update
          brew install openssl

      - name: Install Rust for Substrate - ${{ matrix.os }}
        uses: digitalnativeinc/install-rust-substrate-action@master
        with:
          toolchain_build: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.toolchain-build || env.TOOLCHAIN_BUILD }}

      - name: Install Rust for Substrate
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.TOOLCHAIN_BUILD }}"
          override: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.toolchain-override || env.TOOLCHAIN_BUILD }}
          target: wasm32-unknown-unknown
          components: rustfmt

      - name: Run Build - ${{ matrix.os }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      # retrieves arch details for a build machine
      # example: 'linux-amd64'
      # is a bit hacky since we rely output file will have the same arch as
      # a build machine, will need to look into it
      - name: Retrieve arch - ${{ matrix.os }}
        id: arch
        run: |
          ARCH="$(uname -s)-$(uname -m)"
          ARCH_L=$(echo "$ARCH" | tr '[:upper:]' '[:lower:]')
          echo "::set-output name=DETAILS::${ARCH_L}"

      - name: Artifact actions - ${{ matrix.os }}
        run: |
          mv ./target/release/opportunity-standalone ./opportunity-standalone-${{ steps.arch.outputs.DETAILS }}
          mv ./target/release/standard-collator ./standard-collator-${{ steps.arch.outputs.DETAILS }}

      - name: Upload Artifacts - ${{ matrix.os }}
        uses: actions/upload-artifact@v2
        with:
          name: standard-substrate-${{ steps.arch.outputs.DETAILS }}
          if-no-files-found: error
          path: |
            ./opportunity-standalone-${{ steps.arch.outputs.DETAILS }}
            ./standard-collator-${{ steps.arch.outputs.DETAILS }}
